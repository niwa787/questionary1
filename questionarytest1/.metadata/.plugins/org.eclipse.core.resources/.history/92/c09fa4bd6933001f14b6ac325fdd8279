package com.boostmytool.beststore.controllers;

import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.boostmytool.beststore.models.MultipleChoiceAnswer;
import com.boostmytool.beststore.models.Product;
import com.boostmytool.beststore.models.ProductDto;
import com.boostmytool.beststore.models.SingleChoiceAnswer;
import com.boostmytool.beststore.models.TextAnswer;
import com.boostmytool.beststore.services.MultipleChoiceAnswerRepository;
import com.boostmytool.beststore.services.ProductsRepository;
import com.boostmytool.beststore.services.ProductsService;
import com.boostmytool.beststore.services.SingleChoiceAnswerRepository;
import com.boostmytool.beststore.services.TextAnswerRepository;

@Controller
@RequestMapping("/user")
public class UserController {

    @Autowired
    private ProductsRepository repo;

    @Autowired
    private ProductsService productsService;

    @Autowired
    private TextAnswerRepository textAnswerRepository;
    

    @Autowired
    private SingleChoiceAnswerRepository singleChoiceAnswerRepository;  
    
    @Autowired
    private MultipleChoiceAnswerRepository multipleChoiceAnswerRepository;

    @GetMapping({ "", "/" })
    public String showProductList(Model model,
                                  @RequestParam(defaultValue = "0") int page,
                                  @RequestParam(defaultValue = "10") int size,
                                  @RequestParam(defaultValue = "id") String sortField,
                                  @RequestParam(defaultValue = "asc") String sortDir,
                                  @RequestParam(required = false) String keyword) {
        Sort sort = sortDir.equalsIgnoreCase("asc") ? Sort.by(sortField).ascending() : Sort.by(sortField).descending();
        Pageable pageable = PageRequest.of(page, size, sort);
        Page<Product> productPage;
        if (keyword != null && !keyword.isEmpty()) {
            productPage = productsService.search(keyword, pageable);
        } else {
            productPage = productsService.findAll(pageable);
        }

        model.addAttribute("productPage", productPage);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", productPage.getTotalPages());
        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
        model.addAttribute("keyword", keyword);

        return "user/index";
    }
    
    

    @GetMapping("/edit")
    public String showEditPage(Model model, @RequestParam int id) {

        try {
            Product product = repo.findById(id).get();
            model.addAttribute("product", product);

            ProductDto productDto = new ProductDto();
            productDto.setName(product.getName());
            productDto.setBrand(product.getBrand());
            productDto.setCategory(product.getCategory());
            productDto.setPrice(product.getPrice());
            productDto.setDescription(product.getDescription());
            productDto.setUpdateTime(product.getUpdateTime());
            productDto.setStatus(product.getStatus());

            model.addAttribute("productDto", productDto);

            switch (product.getCategory()) {
                case "簡答":
                    return "user/editTextAnswer";
                case "單選":
                    List<String> options = Arrays.asList(product.getBrand().split(","));
                    model.addAttribute("options", options);
                    return "user/editSingleChoiceAnswer";
                case "多選":
                    // Add logic for multiple choice if necessary
                    return "user/editMultipleChoiceAnswer";
                default:
                    throw new IllegalArgumentException("Unsupported category: " + product.getCategory());
            }
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
            return "redirect:/products?page=0&sortField=id&sortDir=desc";
        }
    }

    @PostMapping("/edit")
    public String updateProduct(Model model, @RequestParam int id, @Valid @ModelAttribute ProductDto productDto, BindingResult result) {

        try {
            Product product = repo.findById(id).get();
            model.addAttribute("product", product);

            if (result.hasErrors()) {
                return "products/EditProduct";
            }

            if (!productDto.getImageFile().isEmpty()) {
                // delete old image
                String uploadDir = "public/images/";
                Path oldImagePath = Paths.get(uploadDir + product.getImageFileName());

                try {
                    Files.delete(oldImagePath);
                } catch (Exception ex) {
                    System.out.println("Exception: " + ex.getMessage());
                }

                // save new image file
                MultipartFile image = productDto.getImageFile();
                Date createdAt = new Date();
                String storageFileName = createdAt.getTime() + "_" + image.getOriginalFilename();

                try (InputStream inputStream = image.getInputStream()) {
                    Files.copy(inputStream, Paths.get(uploadDir + storageFileName), StandardCopyOption.REPLACE_EXISTING);
                }

                product.setImageFileName(storageFileName);
            }

            product.setName(productDto.getName());
            product.setBrand(productDto.getBrand());
            product.setCategory(productDto.getCategory());
            product.setPrice(productDto.getPrice());
            product.setDescription(productDto.getDescription());
            product.setUpdateTime(new Date());
            product.setStatus(productDto.getStatus());

            repo.save(product);
        } catch (Exception ex) {
            System.out.println("Exception: " + ex.getMessage());
        }

        return "redirect:/user?page=0&sortField=id&sortDir=desc";
    }

    @GetMapping("/newAnswer")
    public String showNewAnswerForm(Model model, @RequestParam Long productId) {
        Product product = repo.findById(productId).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + productId));
        if (product.getCategory().equals("簡答")) {
            TextAnswer textAnswer = new TextAnswer();
            textAnswer.setQuestionId(product.getId());
            textAnswer.setQuestion(product.getName());
            model.addAttribute("textAnswer", textAnswer);
            return "user/newTextAnswer";
        } else if (product.getCategory().equals(" 單選")) {
            List<String> options = Arrays.asList(product.getBrand().split(","));
            model.addAttribute("options", options);
            model.addAttribute("product", product);
            return "user/singleChoiceAnswer";
        } else if (product.getCategory().equals("多選")) {
        	 List<String> options = Arrays.asList(product.getBrand().split(","));
             model.addAttribute("options", options);
             model.addAttribute("product", product);
             return "user/multipleChoiceAnswer";
        }else {
            throw new IllegalArgumentException("Unsupported category: " + product.getCategory());
        }
    }

    @PostMapping("/submitAnswer")
    public String submitAnswer(@RequestParam("answer") String answer, @RequestParam("productId") Integer productId) {
        Product product = repo.findById(productId).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + productId));

        if (product.getCategory().equals("簡答")) {
            TextAnswer textAnswer = new TextAnswer();
            textAnswer.setQuestionId(product.getId());
            textAnswer.setQuestion(product.getName());
            textAnswer.setAnswer(answer);
            textAnswerRepository.save(textAnswer);
        }else {
        	return "/user";
        }

        return "user/thankyou";
    }

    @PostMapping("/submitSingleChoiceAnswer")
    public String submitSingleChoiceAnswer(@RequestParam("answer") String answer, @RequestParam("productId") Integer productId) {
        Product product = repo.findById(productId).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + productId));

        if (product.getCategory().equals("單選")) {
            SingleChoiceAnswer singleChoiceAnswer = new SingleChoiceAnswer();
            singleChoiceAnswer.setQuestionId(product.getId());
            singleChoiceAnswer.setQuestion(product.getName());
            singleChoiceAnswer.setAnswer(answer);
            singleChoiceAnswerRepository.save(singleChoiceAnswer);
        }else {
        	return "/user";
        }

        return "user/thankyou";
    }
    
    @PostMapping("/submitMultipleChoiceAnswer")
    public String submitMultipleChoiceAnswer(@RequestParam("answers") String[] answers, @RequestParam("productId") Integer productId) {
        Product product = repo.findById(productId).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + productId));

        if (product.getCategory().equals("多選")) {
            MultipleChoiceAnswer multipleChoiceAnswer = new MultipleChoiceAnswer();
            multipleChoiceAnswer.setQuestionId(product.getId());
            multipleChoiceAnswer.setQuestion(product.getName());
         // 將選項陣列轉換為單個字串
            StringBuilder combinedAnswers = new StringBuilder();
            for (String answer : answers) {
                combinedAnswers.append(answer);
            }

            multipleChoiceAnswer.setAnswers(combinedAnswers.toString());
            multipleChoiceAnswerRepository.save(multipleChoiceAnswer);
        }else {
        	return "redirect:/user";
        }


        return "redirect:/user/thankyou";
    }
    @GetMapping("/stats")
    public String showProductStats(@RequestParam int id, Model model) {
        Product product = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + id));
        model.addAttribute("product", product);

        if (product.getCategory().equals("簡答")) {
            List<TextAnswer> answers = textAnswerRepository.findByQuestionId(id);
            model.addAttribute("answers", answers);
            return "user/textAnswerStats";
        } else if (product.getCategory().equals("單選")) {
            List<SingleChoiceAnswer> answers = singleChoiceAnswerRepository.findByQuestionId(id);
            model.addAttribute("answers", answers);
            return "user/singleChoiceAnswerStats";
        } else if (product.getCategory().equals("多選")) {
            List<MultipleChoiceAnswer> answers = multipleChoiceAnswerRepository.findByQuestionId(id);
            model.addAttribute("answers", answers);
            return "user/multipleChoiceAnswerStats";
        } else {
            throw new IllegalArgumentException("Unsupported category: " + product.getCategory());
        }
    }
}
    
    
    
   

