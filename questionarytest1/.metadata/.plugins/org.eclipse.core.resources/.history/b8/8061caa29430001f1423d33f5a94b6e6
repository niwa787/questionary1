package com.boostmytool.beststore.controllers;

import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.boostmytool.beststore.models.Admin;
import com.boostmytool.beststore.models.MultipleChoiceAnswer;
import com.boostmytool.beststore.models.Product;
import com.boostmytool.beststore.models.ProductDto;
import com.boostmytool.beststore.models.SingleChoiceAnswer;
import com.boostmytool.beststore.models.TextAnswer;
import com.boostmytool.beststore.services.AdminService;
import com.boostmytool.beststore.services.MultipleChoiceAnswerRepository;
import com.boostmytool.beststore.services.ProductService;
import com.boostmytool.beststore.services.ProductsRepository;
import com.boostmytool.beststore.services.ProductsService;
import com.boostmytool.beststore.services.SingleChoiceAnswerRepository;
import com.boostmytool.beststore.services.TextAnswerRepository;



@Controller
@RequestMapping("/products")
public class ProductsController {

	@Autowired   
    private ProductsRepository repo;
	
	@Autowired
	private ProductsService productsService;
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private AdminService adminService;
	
	@Autowired
    private TextAnswerRepository textAnswerRepository;
    

    @Autowired
    private SingleChoiceAnswerRepository singleChoiceAnswerRepository;  
    
    @Autowired
    private MultipleChoiceAnswerRepository multipleChoiceAnswerRepository;

	
	@GetMapping({ "", "/" })
	public String showProductList(Model model,
	                              @RequestParam(defaultValue = "0") int page,
	                              @RequestParam(defaultValue = "10") int size,
	                              @RequestParam(defaultValue = "id") String sortField,
	                              @RequestParam(defaultValue = "asc") String sortDir,
	                              @RequestParam(required = false) String keyword) {
	    Sort sort = sortDir.equalsIgnoreCase("asc") ? Sort.by(sortField).ascending() : Sort.by(sortField).descending();
	    Pageable pageable = PageRequest.of(page, size, sort);
	    Page<Product> productPage;
	    if (keyword != null && !keyword.isEmpty()) {
	        productPage = productsService.search(keyword, pageable);
	    } else {
	        productPage = productsService.findAll(pageable);
	    }

	    model.addAttribute("productPage", productPage);
	    model.addAttribute("currentPage", page);
	    model.addAttribute("totalPages", productPage.getTotalPages());
	    model.addAttribute("sortField", sortField);
	    model.addAttribute("sortDir", sortDir);
	    model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
	    model.addAttribute("keyword", keyword);

	    return "products/index";
	}
	@GetMapping("/index")
    public String showProductList1(Model model,
                                  @RequestParam(defaultValue = "0") int page,
                                  @RequestParam(defaultValue = "10") int size,
                                  @RequestParam(defaultValue = "id") String sortField,
                                  @RequestParam(defaultValue = "asc") String sortDir,
                                  @RequestParam(required = false) String keyword) {
        Sort sort = sortDir.equalsIgnoreCase("asc") ? Sort.by(sortField).ascending() : Sort.by(sortField).descending();
        Pageable pageable = PageRequest.of(page, size, sort);
        Page<Product> productPage;
        if (keyword != null && !keyword.isEmpty()) {
            productPage = productsService.search(keyword, pageable);
        } else {
            productPage = productsService.findAll(pageable);
        }

        model.addAttribute("productPage", productPage);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", productPage.getTotalPages());
        model.addAttribute("sortField", sortField);
        model.addAttribute("sortDir", sortDir);
        model.addAttribute("reverseSortDir", sortDir.equals("asc") ? "desc" : "asc");
        model.addAttribute("keyword", keyword);

        return "products/index";
    }

	
	@GetMapping("/create")
	public String showCreatePage(Model model) {
	    ProductDto productDto = new ProductDto();
	    model.addAttribute("productDto", productDto);
	    return "products/CreateProduct";
	}

	@PostMapping("/create")
	public String createProduct(
	        @Valid @ModelAttribute ProductDto productDto,
	        BindingResult result
	        ) {

	    if (productDto.getImageFile().isEmpty()) {
	        result.addError(new FieldError("productDto", "imageFile", "The image file is required"));
	    }

	    if (result.hasErrors()) {
	        return "products/CreateProduct";
	    }

	    // save image file
	    MultipartFile image = productDto.getImageFile();
	    Date now = new Date();
	    String storageFileName = now.getTime() + "_" + image.getOriginalFilename();

	    try {
	        String uploadDir = "public/images/";
	        Path uploadPath = Paths.get(uploadDir);

	        if (!Files.exists(uploadPath)) {
	            Files.createDirectories(uploadPath);
	        }

	        try (InputStream inputStream = image.getInputStream()) {
	            Files.copy(inputStream, Paths.get(uploadDir + storageFileName),
	                StandardCopyOption.REPLACE_EXISTING);
	        }
	    } catch (Exception ex) {
	        System.out.println("Exception: " + ex.getMessage());
	    }

	    Product product = new Product();
	    product.setName(productDto.getName());
	    product.setBrand(productDto.getBrand());
	    product.setCategory(productDto.getCategory());
	    product.setPrice(productDto.getPrice());
	    product.setDescription(productDto.getDescription());
	    product.setCreatedAt(productDto.getCreatedAt()); // 使用用户选择的日期
	    product.setUpdateTime(now); // 设置更新时间
	    product.setStatus(productDto.getStatus()); // 设置状态
	    product.setImageFileName(storageFileName);

	    repo.save(product);

	    return "redirect:/products?page=0&sortField=id&sortDir=desc";
	}
		
	@GetMapping("/edit")
    public String showEditPage(
            Model model,
            @RequestParam int id
            ) {
		
		try {
			Product product = repo.findById(id).get();
			model.addAttribute("product", product);
			
			
			ProductDto productDto = new ProductDto();
    		productDto.setName(product.getName());
    		productDto.setBrand(product.getBrand());
    		productDto.setCategory(product.getCategory());
    		productDto.setPrice(product.getPrice());
    		productDto.setDescription(product.getDescription());
    		productDto.setUpdateTime(product.getUpdateTime());
            productDto.setStatus(product.getStatus());
            
    		
    		model.addAttribute("productDto", productDto);
		}
		catch(Exception ex) {
    		System.out.println("Exception: " + ex.getMessage());
    		return "redirect:/products?page=0&sortField=id&sortDir=desc";
    	}
		
		return "products/EditProduct";
	}
	
	@PostMapping("/edit")
    public String updateProduct(
    		Model model,
            @RequestParam int id,
            @Valid @ModelAttribute ProductDto productDto,
            BindingResult result
            ) {
		
		try {
			Product product = repo.findById(id).get();
    		model.addAttribute("product", product);
    		
    		if (result.hasErrors()) {
        		return "products/EditProduct";
        	}
    		
    		if (!productDto.getImageFile().isEmpty()) {
    			// delete old image
    			String uploadDir = "public/images/";
        		Path oldImagePath = Paths.get(uploadDir + product.getImageFileName());
                
                try {
                	Files.delete(oldImagePath);
                }
                catch(Exception ex) {
                	System.out.println("Exception: " + ex.getMessage());
                }
    			
    			// save new image file
    	    	MultipartFile image = productDto.getImageFile();
    	    	Date createdAt = new Date();
    	    	String storageFileName = createdAt.getTime() + "_" + image.getOriginalFilename();
    	    	                
                try (InputStream inputStream = image.getInputStream()) {
    				Files.copy(inputStream, Paths.get(uploadDir + storageFileName),
    					StandardCopyOption.REPLACE_EXISTING);
    			}
                
                product.setImageFileName(storageFileName);
        	}
    		
    		product.setName(productDto.getName());
    		product.setBrand(productDto.getBrand());
    		product.setCategory(productDto.getCategory());
    		product.setPrice(productDto.getPrice());
    		product.setDescription(productDto.getDescription());
    		product.setUpdateTime(new Date());
            product.setStatus(productDto.getStatus());
    		
    		repo.save(product);
		}
		catch(Exception ex) {
			System.out.println("Exception: " + ex.getMessage());
		}
		
		return "redirect:/products?page=0&sortField=id&sortDir=desc";
	}
	
	@GetMapping("/delete")
	public String deleteProduct(
            @RequestParam int id
            ) {
		
		try {
			Product product = repo.findById(id).get();
			
			
			// delete product image
    		Path imagePath = Paths.get("public/images/" + product.getImageFileName());
            
            try {
            	Files.delete(imagePath);
            }
            catch(Exception ex) {
            	System.out.println("Exception: " + ex.getMessage());
            }
            
            
            // delete the product
        	repo.delete(product);
		}
		catch (Exception ex) {
        	System.out.println("Exception: " + ex.getMessage());
        }
		
		return "redirect:/products";
	}
	
	@GetMapping("/stats")
    public String showProductStats(@RequestParam int id, Model model) {
        Product product = repo.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid product Id:" + id));
        model.addAttribute("product", product);

        if (product.getCategory().equals("簡答")) {
            List<TextAnswer> answers = textAnswerRepository.findByQuestionId(id);
            model.addAttribute("answers", answers);
            return "products/textAnswerStats";
        } else if (product.getCategory().equals("單選")) {
            List<SingleChoiceAnswer> answers = singleChoiceAnswerRepository.findByQuestionId(id);
            model.addAttribute("answers", answers);
            return "products/singleChoiceAnswerStats";
        } else if (product.getCategory().equals("多選")) {
            List<MultipleChoiceAnswer> answers = multipleChoiceAnswerRepository.findByQuestionId(id);
            model.addAttribute("answers", answers);
            return "products/multipleChoiceAnswerStats";
        } else {
            throw new IllegalArgumentException("Unsupported category: " + product.getCategory());
        }
    }
	
	@GetMapping("/singleChoiceStats")
    public String showSingleChoiceStats(@RequestParam int questionId, Model model) {
        List<SingleChoiceAnswer> answers = singleChoiceAnswerRepository.findByQuestionId(questionId);
        Product product = repo.findById(questionId).orElse(null);
        if (product == null) {
            product = new Product();
            product.setName("單選題統計");
        }

        model.addAttribute("product", product);
        model.addAttribute("answers", answers);
        
        return "singleChoiceAnswerStats"; // 返回對應的模板名稱
    }
	@GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("admin", new Admin());
        return "products/register"; // 確保模板名稱為 register.html
    }

	@PostMapping("/register")
    public String registerAdmin(Admin admin, RedirectAttributes redirectAttributes) {
        adminService.save(admin);
        redirectAttributes.addFlashAttribute("successMessage", "註冊成功！");
        return "products/index"; // 註冊成功後重定向到產品頁面
    }
}
